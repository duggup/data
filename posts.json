[
    {
        "id": "python-iterable-integers",
        "title": "Making Python Integers Iterable",
        "description": "In Python, Integers are not iterables but we can make them iterable by implementing __iter__ function. In this essay, we change Python's source code and implement iter function for integers.",
        "cover": "https://user-images.githubusercontent.com/4745789/84585100-bf06af80-ae29-11ea-8797-16c70aee5cc4.png",
        "gif": "https://media.giphy.com/media/k4ta29T68xlfi/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "python"
        ],
        "published_time": "2020-06-14"
    },
    {
        "id": "inheritance-c",
        "title": "Powering inheritance in C using structure composition",
        "description": "C language does not support inheritance however it does support Structure Compositions which can be tweaked to serve use-cases requiring parent-child relationships. In this article we find out how Structure Compositions help us emulate inheritance in C and keep our code extensible. We will also find how it powers two of the most important things to have ever been invented in the field of computer science.",
        "cover": "https://user-images.githubusercontent.com/4745789/83960768-2bbdff00-a8aa-11ea-9e82-16b928d2a244.png",
        "gif": "https://media.giphy.com/media/3o6Mbk7C7HVuhyqX3G/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "software-engineering"
        ],
        "published_time": "2020-06-07"
    },
    {
        "id": "consistent-hashing",
        "title": "Consistent Hashing",
        "description": "Consistent Hashing is one of the most sought after techniques when it comes to designing highly scalable distributed systems. In this article, we dive deep into the need for Consistent Hashing, the internals of it, and more importantly along the way implement it using arrays and binary search.",
        "cover": "https://user-images.githubusercontent.com/4745789/82760647-92efa400-9e12-11ea-9533-5003bc3c46df.png",
        "gif": "https://media.giphy.com/media/3ofSBqzxwsiN0npCak/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "algorithms"
        ],
        "published_time": "2020-05-31"
    },
    {
        "id": "rum",
        "title": "The RUM Conjecture",
        "description": "While designing any storage system the three main aspects we optimize for are Reads, Updates, and auxiliary Memory. RUM Conjecture states that these three form a competing triangle and we could only optimize two at the expense of the third.",
        "cover": "https://user-images.githubusercontent.com/4745789/83344735-64009300-a328-11ea-858a-587d440136f1.png",
        "gif": "https://media.giphy.com/media/1n7B7bJ917pqZGHG9m/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "software-engineering"
        ],
        "published_time": "2020-05-24"
    },
    {
        "id": "python-caches-integers",
        "title": "Python Caches Integers",
        "description": "To gain a performance boost and avoid reallocation of frequently used integers, Python creates singleton instances of small integer values and uses them by reference.",
        "cover": "https://user-images.githubusercontent.com/4745789/82141979-a620d380-9856-11ea-9a4a-32399c0c01b8.png",
        "gif": "https://media.giphy.com/media/l378kmO7gdbXaesXS/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "python"
        ],
        "published_time": "2020-05-17"
    },
    {
        "id": "fractional-cascading-speeding-up-binary-searches",
        "title": "Fractional Cascading - Speeding up Binary Searches",
        "description": "The performance of binary search when applied on k lists independently can be improved using bridges and the technique is called Fractional Cascading. Fractional Cascading also sees its application in Geometric Data Structures, Segment Trees, and Databases.",
        "cover": "https://user-images.githubusercontent.com/4745789/81494077-8112ea80-92c3-11ea-9416-bb2422334744.png",
        "gif": "https://media.giphy.com/media/1k5k3J5K3BywQOrpNA/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "algorithms"
        ],
        "published_time": "2020-05-10"
    },
    {
        "id": "copy-on-write-semantics",
        "title": "Copy-on-Write Semantics",
        "description": "Copy-on-write is used to model Time Travel, build databases with no locks, and makes the fork system call super-efficient.",
        "cover": "https://user-images.githubusercontent.com/4745789/80913860-73121680-8d65-11ea-87f8-d02460f05a22.png",
        "gif": "https://media.giphy.com/media/GIrIC3g657AYg/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "algorithms",
            "databases"
        ],
        "published_time": "2020-05-03"
    },
    {
        "id": "what-makes-mysql-lru-cache-scan-resistant",
        "title": "What makes MySQL LRU cache scan resistant",
        "description": "The MySQL InnoDB Storage engine uses LRU cache but it suffers from a notorious problem. In this article, we find how by using Midpoint Insertion Strategy and changing one aspect of LRU, MySQL becomes scan resistant and super performant.",
        "cover": "https://user-images.githubusercontent.com/4745789/80304802-0ed7db80-87d6-11ea-98db-bc5d4afe965b.png",
        "gif": "https://media.giphy.com/media/daUOBsa1OztxC/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "algorithms",
            "databases"
        ],
        "published_time": "2020-04-26T00:00:00.000Z",
        "originalUrl": "https://arpitbhayani.me/blogs/mysql-cache"
    },
    {
        "id": "building-finite-state-machines-with-python-coroutines",
        "title": "Building Finite State Machines with Python Coroutines",
        "description": "The most intuitive way of building and implementing Finite State Machines is by using Python Coroutines and in this article, we find how and why.",
        "cover": "https://user-images.githubusercontent.com/4745789/79684359-3ebf3600-824e-11ea-97cc-0f06c2919aeb.png",
        "gif": "https://media.giphy.com/media/KhdQ2Ia3FJuKs/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "python"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/fsm",
        "published_time": "2020-04-19T00:00:00.000Z"
    },
    {
        "id": "s.o.l.i.d-principles",
        "title": "S.O.L.I.D Principles",
        "description": "SOLID is a set of design principles in object-oriented software development; and when applied properly makes your code more extendable, logical and easier to read.",
        "cover": "https://user-images.githubusercontent.com/4745789/79238091-98111900-7e8c-11ea-9627-b289d8b590a6.png",
        "gif": "https://media.giphy.com/media/2Ur7rKKSLIvpwdc2lT/giphy.gif",
        "authors": [
            "piyush27"
        ],
        "topics": [
            "software-engineering"
        ],
        "published_time": "2020-04-14T00:00:00.000Z"
    },
    {
        "id": "solving-an-age-old-problem-using-bayesian-average",
        "title": "Ranking movies using Bayesian Average",
        "description": "Ranking a list of movies, products, books or even restaurants is tricky and in this article, we find what works for such a rating system and the math behind it.",
        "cover": "https://user-images.githubusercontent.com/4745789/79684359-3ebf3600-824e-11ea-97cc-0f06c2919aeb.png",
        "gif": "https://media.giphy.com/media/dJ4vNQ7r72pb4nDhN5/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "statistics"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/bayesian-average",
        "published_time": "2020-04-12T00:00:00.000Z"
    },
    {
        "id": "sliding-window-based-rate-limiter",
        "title": "Designing a sliding window based rate limiter",
        "description": "A rate limiter is used to control the rate of traffic sent or received on the network and in this article we dive deep and design a sliding window based rate limiter.",
        "cover": "https://user-images.githubusercontent.com/4745789/78276848-3c13cf80-7531-11ea-8186-99cb1da58e50.png",
        "gif": "https://media.giphy.com/media/5YuhLwDgrgtRVwI7OY/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "system-design"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/sliding-window-ratelimiter",
        "published_time": "2020-04-05T00:00:00.000Z"
    },
    {
        "id": "understanding-inverse-document-frequency",
        "title": "All you need to know about Inverse Document Frequency",
        "description": "TF-IDF is extensively used in search engines and in various document classification and clustering techniques. Instead of taking the formula by the word, we take a detour and dive deep into the better half of it and find its connection with Probability, the role it plays in document relevance and the intuition behind it.",
        "cover": "https://user-images.githubusercontent.com/4745789/76207579-10e4db80-6224-11ea-91ba-b67359125156.png",
        "gif": "https://media.giphy.com/media/3ornjWIRSzXEw61KH6/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "data-mining"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/idf",
        "published_time": "2020-03-06T00:00:00.000Z"
    },
    {
        "id": "pseudorandom-numbers-using-cellular-automata-rule-30",
        "title": "Pseudorandom numbers using Cellular Automata - Rule 30",
        "description": "Generating pseudorandom numbers is an interesting problem in Computer Science. In this article, we dive deep into an algorithm for generating pseudorandom numbers using Rule 30 of Cellular Automaton.",
        "cover": "https://user-images.githubusercontent.com/4745789/74463952-b07aac80-4eb8-11ea-8d8e-6f286767ec7e.png",
        "gif": "https://media.giphy.com/media/26uflDxU6cEhrhmUg/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "algorithms"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/rule-30",
        "published_time": "2020-02-14T00:00:00.000Z"
    },
    {
        "id": "implementing-function-overloading-in-python",
        "title": "implementing function overloading in Python",
        "description": "Python natively does not support function overloading - having multiple functions with the same name. Today we see how we can implement and add this functionality to Python by using common language constructs like decorators and dictionaries.",
        "cover": "https://user-images.githubusercontent.com/4745789/73909201-04423000-48d2-11ea-8bd0-d7c25f6435c1.png",
        "gif": "https://media.giphy.com/media/WtCHRSPCuqS8E/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "python"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/function-overloading",
        "published_time": "2020-02-07T00:00:00.000Z"
    },
    {
        "id": "isolation-forest-algorithm-for-anomaly-detection",
        "title": "Isolation Forest algorithm for anomaly detection",
        "description": "Anomaly detection is an age-old problem and in this article, we dive deep into an unsupervised algorithm, Isolation Forest, that beautifully exploits the characteristics of anomalies. Instead of profiling normal points and labeling others as anomalies, the algorithm is actually is tuned to detect anomalies.",
        "cover": "https://user-images.githubusercontent.com/4745789/73280907-34743980-4215-11ea-89f0-eac4a71df6e5.png",
        "authors": [
            "arpit_bhayani"
        ],
        "gif": "https://media.giphy.com/media/xGdvlOVSWaDvi/giphy.gif",
        "topics": [
            "algorithms"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/isolation-forest",
        "published_time": "2020-01-28T00:00:00.000Z"
    },
    {
        "id": "everything-that-you-need-to-know-about-image-steganography",
        "title": "Everything that you need to know about Image Steganography",
        "description": "Steganography has been around since at least 440 BCE but with the rise of computers, the techniques have evolved to handle digital data. In this article, we see the science behind image steganography, how it exploits various properties of images to hide secrets and walkthrough a few techniques in detail.",
        "cover": "https://user-images.githubusercontent.com/4745789/72659471-2a1c9900-39e6-11ea-9b93-c11bf3eefc43.png",
        "gif": "https://media.giphy.com/media/V1NxC1YoNEHBe/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "steganography"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/image-steganography",
        "published_time": "2020-01-17T00:00:00.000Z"
    },
    {
        "id": "how-python-implements-super-long-integers",
        "title": "How python implements super long integers?",
        "description": "Python must be doing something beautiful internally to support super long integers and today we find out what's under the hood. The article goes in-depth to explain design, storage, and operations on super long integers as implemented by Python.",
        "cover": "https://user-images.githubusercontent.com/4745789/72040055-55f49c00-32cd-11ea-9190-8f5a67c2f3d9.png",
        "gif": "https://media.giphy.com/media/SKGo6OYe24EBG/giphy.gif",
        "authors": [
            "arpit_bhayani"
        ],
        "topics": [
            "python"
        ],
        "originalUrl": "https://arpitbhayani.me/blogs/super-long-integers",
        "published_time": "2020-01-10T00:00:00.000Z"
    },
    {
        "id": "process-based-parallelism-in-python",
        "title": "Process based parallelism in python",
        "description": "In this article we are going to dive deep and see how python achieves process based parallelism using the multiprocesing module and compare the results with the sequential execution",
        "cover": "https://user-images.githubusercontent.com/27894559/80276263-314df400-8705-11ea-8372-7d5f36dc4b7a.png",
        "gif": "https://media.giphy.com/media/3ohjUMKopips6jL99S/giphy.gif",
        "authors": [
            "hodor"
        ],
        "topics": [
            "python"
        ],
        "published_time": "2020-04-25T00:00:00.000Z"
    }
]